

Step 1: Create a CA and a client CSR
openssl req -new -x509 -days 3650 -config ca.cnf -keyout ca.key -out ca.crt
generate the client's CSR:

openssl req -new -config client.cnf -keyout client.key -out client.csr

Step 2:
[ int_ca_extensions ]
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always

[ int_ca_req ]
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always

Step 3: Create configuration file for Intermediate CA
Create the intermediate CA's private key:
openssl req -new -config int_ca.cnf -keyout int_ca.key -out int_ca.csr

Step 4: Sign the Intermediate CA's CSR by the CA
Sign the intermediate CA's CSR using the CA's private key:
openssl x509 -req -days 1825 -in int_ca.csr -CA ../ca.crt -CAkey ../ca.key -CAcreateserial -out interimca.crt -extfile int_ca.cnf -extensions int_ca_extensions

Step 5: Create client certificate signed by Intermediate CA
openssl x509 -req -days 90 -in client.csr -CA interimca.crt -CAkey int_ca.key -CAcreateserial -out universityofdenver.crt

Step 6: Verify the entire certificate chain
cat universityofdenver.crt interimca.crt > chain.crt
cat universityofdenver.crt interimca.crt > chain.crt
openssl verify -CAfile interimca.crt universityofdenver.crt


ca.cnf

[ req ]
default_bits = 2048
default_keyfile = int_ca.key
distinguished_name = int_ca_distinguished_name
x509_extensions = int_ca_extensions
prompt = no

[ int_ca_distinguished_name ]
countryName = US
organizationName = Trust Services, Inc.
commonName = www.trustservices.com

[ int_ca_extensions ]
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always

[ int_ca_req ]
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always

int_ca.cnf

[ req ]
default_bits = 2048
default_keyfile = int_ca.key
distinguished_name = int_ca_distinguished_name
x509_extensions = int_ca_extensions
prompt = no

[ int_ca_distinguished_name ]
countryName = US
organizationName = Trust Services, Inc.
commonName = www.trustservices.com

[ int_ca_extensions ]
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always

[ int_ca_req ]
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always

generated certificates

┌──(root㉿kali)-[~/openssl-key-generation]
└─# ls
ca.cnf  ca.key  chain.crt   client.key  int_ca.csr  interimca.crt  intermediate_chain.crt
ca.crt  ca.srl  client.csr  int_ca.cnf  int_ca.key  interimca.srl  universityofdenver.crt

Password used:liveordie
I used only 1 password throughout the process.
